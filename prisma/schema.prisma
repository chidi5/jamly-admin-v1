// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STORE_OWNER
  STAFF_USER
}

model User {
  id        String   @id @default(uuid())
  name      String
  avatarUrl String   @db.Text
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @default(STAFF_USER)
  storeId   String?
  Store     Store?   @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@index([storeId])
}

model Store {
  id               String         @id @default(uuid())
  connectAccountId String?        @default("")
  customerId       String?        @default("")
  name             String
  //userId     String
  storeLogo        String?        @db.Text
  companyEmail     String?        @db.Text
  companyPhone     String?
  address          String?
  city             String?
  zipCode          String?
  state            String?
  country          String?
  users            User[]
  billboards       Billboard[]    @relation("StoreToBillboard")
  categories       Category[]     @relation("StoreToCategory")
  products         Product[]      @relation("StoreToProduct")
  orders           Order[]        @relation("StoreToOrder")
  Invitation       Invitation[]
  Notification     Notification[]
  Subscription     Subscription?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id], onDelete: Cascade)
  label      String
  isBanner   Boolean    @default(false)
  imageUrl   String
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([storeId])
}

model Category {
  id          String     @id @default(uuid())
  storeId     String // Foreign Key to Store
  store       Store      @relation("StoreToCategory", fields: [storeId], references: [id], onDelete: Cascade)
  billboardId String? // Foreign Key to Billboard
  billboard   Billboard? @relation(fields: [billboardId], references: [id])
  name        String
  handle      String
  products    Product[]  @relation("CategoryToProduct")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([storeId, handle])
  @@index([storeId])
  @@index([billboardId])
}

model Product {
  id          String      @id @default(uuid())
  storeId     String // Foreign Key to Store
  store       Store       @relation("StoreToProduct", fields: [storeId], references: [id], onDelete: Cascade)
  categoryId  String // Foreign Key to Category
  category    Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name        String
  handle      String
  price       Decimal
  description String      @db.Text
  isFeatured  Boolean     @default(false)
  isArchived  Boolean     @default(false)
  options     Option[] // Relation to Option model
  variants    Variant[] // Relation to Variant model
  images      Image[] // Relation to Image model
  orderItems  OrderItem[] // Relation to Order model
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@unique([storeId, handle])
  @@index([storeId])
  @@index([categoryId])
}

model Order {
  id         String      @id @default(uuid())
  storeId    String // Foreign Key to Store
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id], onDelete: Cascade)
  orderItems OrderItem[] // Relation to OrderItem model
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
}

// Intermediary for a many-to-many relationship
model OrderItem {
  id        String  @id @default(uuid())
  orderId   String // Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  price     Decimal // Store the price of the product variant here
  productId String // Foreign Key to Product
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([productId])
}

model Variant {
  id              String        @id @default(uuid())
  title           String
  productId       String // Foreign key to Product
  product         Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  price           Decimal
  inventory       Int
  selectedOptions OptionValue[] @relation("VariantOptions") // Relation to OptionValues

  @@index([productId])
}

model Option {
  id        String        @id @default(uuid())
  name      String
  productId String // Foreign key to Product
  product   Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  values    OptionValue[] // An Option has many OptionValues
}

model OptionValue {
  id       String    @id @default(uuid())
  value    String
  optionId String
  option   Option    @relation(fields: [optionId], references: [id], onDelete: Cascade)
  variants Variant[] @relation("VariantOptions")

  @@index([optionId])
}

model Image {
  id        String   @id @default(uuid())
  productId String // Foreign Key to Product
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String // URL of the image
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

enum InvitationStatus {
  ACCEPTED
  REVOKED
  PENDING
}

model Invitation {
  id      String           @id @default(uuid())
  email   String           @unique
  storeId String
  Store   Store            @relation(fields: [storeId], references: [id], onDelete: Cascade)
  status  InvitationStatus @default(PENDING)
  role    Role             @default(STAFF_USER)

  @@index([storeId])
}

model Notification {
  id           String @id @default(uuid())
  notification String
  storeId      String
  Store        Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

enum Plan {
  PLN_n9u9ypf43pk6vti
  PLN_4elei0drizjfiie
}

model Subscription {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  plan      Plan?
  price     String?
  active    Boolean  @default(false)

  priceId              String
  customerId           String
  currentPeriodEndDate DateTime
  subscriptionId       String   @unique

  storeId String? @unique
  Store   Store?  @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@index([customerId])
}
