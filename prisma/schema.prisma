// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STORE_OWNER
  STAFF_USER
}

model User {
  id        String   @id @default(uuid())
  name      String
  avatarUrl String   @db.Text
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @default(STAFF_USER)
  storeId   String?
  Store     Store?   @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@index([storeId])
}

model Store {
  id              String          @id @default(uuid())
  customerId      String?         @default("")
  name            String
  storeLogo       String?         @db.Text
  companyEmail    String?         @db.Text
  companyPhone    String?
  address         String?
  city            String?
  zipCode         String?
  state           String?
  country         String?
  locale          String          @default("en-NG")
  defaultCurrency String
  users           User[]
  billboards      Billboard[]     @relation("StoreToBillboard")
  categories      Category[]      @relation("StoreToCategory")
  products        Product[]       @relation("StoreToProduct")
  orders          Order[]         @relation("StoreToOrder")
  Invitation      Invitation[]
  Notification    Notification[]
  Subscription    Subscription?
  paymentConfigs  PaymentConfig[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model Billboard {
  id        String   @id @default(uuid())
  storeId   String
  store     Store    @relation("StoreToBillboard", fields: [storeId], references: [id], onDelete: Cascade)
  label     String
  isBanner  Boolean  @default(false)
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Category {
  id         String    @id @default(uuid())
  storeId    String
  store      Store     @relation("StoreToCategory", fields: [storeId], references: [id], onDelete: Cascade)
  name       String
  handle     String
  imageUrl   String?
  isFeatured Boolean   @default(false)
  products   Product[] @relation("CategoriesOnProduct")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())

  @@unique([storeId, handle])
  @@index([storeId])
}

enum ProductType {
  PHYSICAL
  DIGITAL
}

model Product {
  id                     String                  @id @default(uuid())
  storeId                String
  store                  Store                   @relation("StoreToProduct", fields: [storeId], references: [id], onDelete: Cascade)
  name                   String
  handle                 String
  productType            ProductType             @default(PHYSICAL)
  description            String                  @db.Text
  isFeatured             Boolean                 @default(false)
  isArchived             Boolean                 @default(false)
  manageVariants         Boolean                 @default(false)
  weight                 Float?
  priceData              PriceData?
  costAndProfitData      CostAndProfitData?
  stock                  Stock?
  discount               Discount?
  additionalInfoSections AdditionalInfoSection[]
  categories             Category[]              @relation("CategoriesOnProduct")
  options                Option[]
  variants               Variant[]
  images                 Image[]
  orderItems             OrderItem[]
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt

  @@unique([storeId, handle])
  @@index([storeId])
}

model AdditionalInfoSection {
  id          String  @id @default(uuid())
  title       String  @db.VarChar(50)
  description String  @db.VarChar(16000)
  productId   String
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id         String      @id @default(uuid())
  storeId    String
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  price     Decimal
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([productId])
}

model Variant {
  id                String             @id @default(uuid())
  title             String
  productId         String
  product           Product            @relation(fields: [productId], references: [id], onDelete: Cascade)
  priceData         PriceData?
  costAndProfitData CostAndProfitData?
  stock             Stock?
  selectedOptions   OptionValue[]      @relation("VariantOptions")

  @@index([productId])
}

model Option {
  id        String        @id @default(uuid())
  name      String
  productId String
  product   Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  values    OptionValue[]
}

model OptionValue {
  id       String    @id @default(uuid())
  value    String
  optionId String
  option   Option    @relation(fields: [optionId], references: [id], onDelete: Cascade)
  variants Variant[] @relation("VariantOptions")

  @@index([optionId])
}

model Image {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model PriceData {
  id              String   @id @default(uuid())
  currency        String
  price           Float
  discountedPrice Float?
  product         Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId       String?  @unique
  variant         Variant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId       String?  @unique
}

model CostAndProfitData {
  id                String   @id @default(uuid())
  itemCost          Float
  formattedItemCost String
  profit            Float?
  formattedProfit   String
  profitMargin      Float?
  product           Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId         String?  @unique
  variant           Variant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId         String?  @unique
}

enum InventoryStatus {
  IN_STOCK
  OUT_OF_STOCK
  PARTIALLY_OUT_OF_STOCK
}

model Stock {
  id              String          @id @default(uuid())
  trackInventory  Boolean
  quantity        Int?
  inventoryStatus InventoryStatus
  product         Product?        @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId       String?         @unique
  variant         Variant?        @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId       String?         @unique
}

enum DiscountType {
  AMOUNT
  PERCENT
}

model Discount {
  id        String       @id @default(uuid())
  type      DiscountType
  value     Float
  productId String?      @unique
  product   Product?     @relation(fields: [productId], references: [id], onDelete: Cascade)
}

enum InvitationStatus {
  ACCEPTED
  REVOKED
  PENDING
}

model Invitation {
  id      String           @id @default(uuid())
  email   String           @unique
  storeId String
  Store   Store            @relation(fields: [storeId], references: [id], onDelete: Cascade)
  status  InvitationStatus @default(PENDING)
  role    Role             @default(STAFF_USER)

  @@index([storeId])
}

model Notification {
  id           String @id @default(uuid())
  notification String
  storeId      String
  Store        Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

enum Plan {
  PLN_n9u9ypf43pk6vti
  PLN_4elei0drizjfiie
}

model Subscription {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  plan      Plan?
  price     String?
  active    Boolean  @default(false)

  priceId              String
  customerId           String
  currentPeriodEndDate DateTime
  subscriptionId       String   @unique

  storeId String? @unique
  Store   Store?  @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@index([customerId])
}

model PaymentConfig {
  id        String  @id @default(uuid())
  storeId   String
  store     Store   @relation(fields: [storeId], references: [id], onDelete: Cascade)
  provider  String
  publicKey String
  secretKey String
  isActive  Boolean @default(false)

  @@unique([storeId, provider])
  @@index([storeId])
}
